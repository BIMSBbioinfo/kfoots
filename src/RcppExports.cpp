// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// asGapMat
Rcpp::List asGapMat(Rcpp::IntegerMatrix counts, Rcpp::IntegerVector colset, int nrow);
RcppExport SEXP kfoots_asGapMat(SEXP countsSEXP, SEXP colsetSEXP, SEXP nrowSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type counts(countsSEXP );
        Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type colset(colsetSEXP );
        Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP );
        Rcpp::List __result = asGapMat(counts, colset, nrow);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// asSWMat
Rcpp::List asSWMat(Rcpp::IntegerVector counts, int step, int nrow);
RcppExport SEXP kfoots_asSWMat(SEXP countsSEXP, SEXP stepSEXP, SEXP nrowSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type counts(countsSEXP );
        Rcpp::traits::input_parameter< int >::type step(stepSEXP );
        Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP );
        Rcpp::List __result = asSWMat(counts, step, nrow);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// zScoreThresh
double zScoreThresh(Rcpp::NumericVector lliks, double z, int nthreads = 1);
RcppExport SEXP kfoots_zScoreThresh(SEXP lliksSEXP, SEXP zSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lliks(lliksSEXP );
        Rcpp::traits::input_parameter< double >::type z(zSEXP );
        Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP );
        double __result = zScoreThresh(lliks, z, nthreads);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// fitModelFromColumns
Rcpp::List fitModelFromColumns(SEXP gapmat, Rcpp::List model, Rcpp::List ucs, int negstrand = 0, int nthreads = 1);
RcppExport SEXP kfoots_fitModelFromColumns(SEXP gapmatSEXP, SEXP modelSEXP, SEXP ucsSEXP, SEXP negstrandSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type gapmat(gapmatSEXP );
        Rcpp::traits::input_parameter< Rcpp::List >::type model(modelSEXP );
        Rcpp::traits::input_parameter< Rcpp::List >::type ucs(ucsSEXP );
        Rcpp::traits::input_parameter< int >::type negstrand(negstrandSEXP );
        Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP );
        Rcpp::List __result = fitModelFromColumns(gapmat, model, ucs, negstrand, nthreads);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// filter
Rcpp::List filter(Rcpp::IntegerVector cols, Rcpp::NumericVector scores, const double thresh, int overlap, Rcpp::IntegerVector breaks);
RcppExport SEXP kfoots_filter(SEXP colsSEXP, SEXP scoresSEXP, SEXP threshSEXP, SEXP overlapSEXP, SEXP breaksSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cols(colsSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type scores(scoresSEXP );
        Rcpp::traits::input_parameter< const double >::type thresh(threshSEXP );
        Rcpp::traits::input_parameter< int >::type overlap(overlapSEXP );
        Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type breaks(breaksSEXP );
        Rcpp::List __result = filter(cols, scores, thresh, overlap, breaks);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// removeOverlapping
Rcpp::IntegerVector removeOverlapping(Rcpp::IntegerVector cols, Rcpp::IntegerVector centers, int radius);
RcppExport SEXP kfoots_removeOverlapping(SEXP colsSEXP, SEXP centersSEXP, SEXP radiusSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cols(colsSEXP );
        Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type centers(centersSEXP );
        Rcpp::traits::input_parameter< int >::type radius(radiusSEXP );
        Rcpp::IntegerVector __result = removeOverlapping(cols, centers, radius);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// nbinom_llik
void nbinom_llik(double mu, double r, Rcpp::IntegerVector uniqueCS, Rcpp::NumericVector tmpNB, int nthreads);
RcppExport SEXP kfoots_nbinom_llik(SEXP muSEXP, SEXP rSEXP, SEXP uniqueCSSEXP, SEXP tmpNBSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type mu(muSEXP );
        Rcpp::traits::input_parameter< double >::type r(rSEXP );
        Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type uniqueCS(uniqueCSSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tmpNB(tmpNBSEXP );
        Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP );
        nbinom_llik(mu, r, uniqueCS, tmpNB, nthreads);
    }
    return R_NilValue;
END_RCPP
}
// multinom_llik
void multinom_llik(SEXP gapmat, Rcpp::NumericVector ps, Rcpp::NumericVector llik, Rcpp::IntegerVector map, Rcpp::NumericVector tmpNB, Rcpp::NumericVector mconst, int nthreads);
RcppExport SEXP kfoots_multinom_llik(SEXP gapmatSEXP, SEXP psSEXP, SEXP llikSEXP, SEXP mapSEXP, SEXP tmpNBSEXP, SEXP mconstSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type gapmat(gapmatSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ps(psSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type llik(llikSEXP );
        Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type map(mapSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tmpNB(tmpNBSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mconst(mconstSEXP );
        Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP );
        multinom_llik(gapmat, ps, llik, map, tmpNB, mconst, nthreads);
    }
    return R_NilValue;
END_RCPP
}
// findBreaks
Rcpp::IntegerVector findBreaks(Rcpp::IntegerVector colset, int overlap, int nthreads);
RcppExport SEXP kfoots_findBreaks(SEXP colsetSEXP, SEXP overlapSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type colset(colsetSEXP );
        Rcpp::traits::input_parameter< int >::type overlap(overlapSEXP );
        Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP );
        Rcpp::IntegerVector __result = findBreaks(colset, overlap, nthreads);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// forward_backward
List forward_backward(NumericVector initP, NumericMatrix trans, NumericMatrix lliks, IntegerVector seqlens, NumericMatrix posteriors, int nthreads = 1);
RcppExport SEXP kfoots_forward_backward(SEXP initPSEXP, SEXP transSEXP, SEXP lliksSEXP, SEXP seqlensSEXP, SEXP posteriorsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type initP(initPSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type trans(transSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type lliks(lliksSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type seqlens(seqlensSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type posteriors(posteriorsSEXP );
        Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP );
        List __result = forward_backward(initP, trans, lliks, seqlens, posteriors, nthreads);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// viterbi
List viterbi(NumericVector initP, NumericMatrix trans, NumericMatrix lliks, NumericVector seqlens);
RcppExport SEXP kfoots_viterbi(SEXP initPSEXP, SEXP transSEXP, SEXP lliksSEXP, SEXP seqlensSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type initP(initPSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type trans(transSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type lliks(lliksSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type seqlens(seqlensSEXP );
        List __result = viterbi(initP, trans, lliks, seqlens);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// orderColumns
Rcpp::IntegerVector orderColumns(Rcpp::IntegerMatrix mat);
RcppExport SEXP kfoots_orderColumns(SEXP matSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type mat(matSEXP );
        Rcpp::IntegerVector __result = orderColumns(mat);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// llik2posteriors
Rcpp::List llik2posteriors(Rcpp::NumericMatrix lliks, Rcpp::NumericVector mix_coeff, Rcpp::NumericMatrix posteriors, int nthreads = 1);
RcppExport SEXP kfoots_llik2posteriors(SEXP lliksSEXP, SEXP mix_coeffSEXP, SEXP posteriorsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type lliks(lliksSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mix_coeff(mix_coeffSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type posteriors(posteriorsSEXP );
        Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP );
        Rcpp::List __result = llik2posteriors(lliks, mix_coeff, posteriors, nthreads);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// mapToUnique
Rcpp::List mapToUnique(Rcpp::IntegerVector values);
RcppExport SEXP kfoots_mapToUnique(SEXP valuesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type values(valuesSEXP );
        Rcpp::List __result = mapToUnique(values);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// subsetM2U
Rcpp::List subsetM2U(Rcpp::List ucs, Rcpp::IntegerVector colidxs);
RcppExport SEXP kfoots_subsetM2U(SEXP ucsSEXP, SEXP colidxsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::List >::type ucs(ucsSEXP );
        Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type colidxs(colidxsSEXP );
        Rcpp::List __result = subsetM2U(ucs, colidxs);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// getMultinomConst
Rcpp::NumericVector getMultinomConst(Rcpp::IntegerMatrix counts, int nthreads = 1);
RcppExport SEXP kfoots_getMultinomConst(SEXP countsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type counts(countsSEXP );
        Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP );
        Rcpp::NumericVector __result = getMultinomConst(counts, nthreads);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// getMultinomConstSW
Rcpp::NumericVector getMultinomConstSW(SEXP counts, int nthreads = 1);
RcppExport SEXP kfoots_getMultinomConstSW(SEXP countsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type counts(countsSEXP );
        Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP );
        Rcpp::NumericVector __result = getMultinomConstSW(counts, nthreads);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// sumAt
Rcpp::NumericVector sumAt(Rcpp::NumericVector values, Rcpp::IntegerVector map, int size, bool zeroIdx = false);
RcppExport SEXP kfoots_sumAt(SEXP valuesSEXP, SEXP mapSEXP, SEXP sizeSEXP, SEXP zeroIdxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP );
        Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type map(mapSEXP );
        Rcpp::traits::input_parameter< int >::type size(sizeSEXP );
        Rcpp::traits::input_parameter< bool >::type zeroIdx(zeroIdxSEXP );
        Rcpp::NumericVector __result = sumAt(values, map, size, zeroIdx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// colSumsInt
Rcpp::IntegerVector colSumsInt(Rcpp::IntegerMatrix nums, int nthreads = 1);
RcppExport SEXP kfoots_colSumsInt(SEXP numsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type nums(numsSEXP );
        Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP );
        Rcpp::IntegerVector __result = colSumsInt(nums, nthreads);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// colSumsIntSW
Rcpp::IntegerVector colSumsIntSW(SEXP nums, int nthreads = 1);
RcppExport SEXP kfoots_colSumsIntSW(SEXP numsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type nums(numsSEXP );
        Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP );
        Rcpp::IntegerVector __result = colSumsIntSW(nums, nthreads);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// colSumsDouble
Rcpp::NumericVector colSumsDouble(Rcpp::NumericMatrix nums, int nthreads = 1);
RcppExport SEXP kfoots_colSumsDouble(SEXP numsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type nums(numsSEXP );
        Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP );
        Rcpp::NumericVector __result = colSumsDouble(nums, nthreads);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rowSumsDouble
Rcpp::NumericVector rowSumsDouble(Rcpp::NumericMatrix mat, int nthreads = 1);
RcppExport SEXP kfoots_rowSumsDouble(SEXP matSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type mat(matSEXP );
        Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP );
        Rcpp::NumericVector __result = rowSumsDouble(mat, nthreads);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// lLikMat
void lLikMat(Rcpp::IntegerMatrix counts, Rcpp::List models, Rcpp::List ucs, Rcpp::NumericVector mConst, Rcpp::NumericVector lliks, int nthreads = 1);
RcppExport SEXP kfoots_lLikMat(SEXP countsSEXP, SEXP modelsSEXP, SEXP ucsSEXP, SEXP mConstSEXP, SEXP lliksSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type counts(countsSEXP );
        Rcpp::traits::input_parameter< Rcpp::List >::type models(modelsSEXP );
        Rcpp::traits::input_parameter< Rcpp::List >::type ucs(ucsSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mConst(mConstSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lliks(lliksSEXP );
        Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP );
        lLikMat(counts, models, ucs, mConst, lliks, nthreads);
    }
    return R_NilValue;
END_RCPP
}
// lLikGapMat
void lLikGapMat(SEXP counts, Rcpp::List models, Rcpp::List ucs, Rcpp::NumericVector mConst, Rcpp::NumericVector lliks, int nthreads = 1);
RcppExport SEXP kfoots_lLikGapMat(SEXP countsSEXP, SEXP modelsSEXP, SEXP ucsSEXP, SEXP mConstSEXP, SEXP lliksSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type counts(countsSEXP );
        Rcpp::traits::input_parameter< Rcpp::List >::type models(modelsSEXP );
        Rcpp::traits::input_parameter< Rcpp::List >::type ucs(ucsSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mConst(mConstSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lliks(lliksSEXP );
        Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP );
        lLikGapMat(counts, models, ucs, mConst, lliks, nthreads);
    }
    return R_NilValue;
END_RCPP
}
// pwhichmax
Rcpp::IntegerVector pwhichmax(Rcpp::NumericMatrix posteriors, int nthreads = 1);
RcppExport SEXP kfoots_pwhichmax(SEXP posteriorsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type posteriors(posteriorsSEXP );
        Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP );
        Rcpp::IntegerVector __result = pwhichmax(posteriors, nthreads);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// fitNB_inner
Rcpp::List fitNB_inner(Rcpp::IntegerVector counts, Rcpp::NumericVector posteriors, double initR = -1);
RcppExport SEXP kfoots_fitNB_inner(SEXP countsSEXP, SEXP posteriorsSEXP, SEXP initRSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type counts(countsSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type posteriors(posteriorsSEXP );
        Rcpp::traits::input_parameter< double >::type initR(initRSEXP );
        Rcpp::List __result = fitNB_inner(counts, posteriors, initR);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// fitModels
Rcpp::List fitModels(Rcpp::IntegerMatrix counts, Rcpp::NumericMatrix posteriors, Rcpp::List models, Rcpp::List ucs, int nthreads = 1);
RcppExport SEXP kfoots_fitModels(SEXP countsSEXP, SEXP posteriorsSEXP, SEXP modelsSEXP, SEXP ucsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type counts(countsSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type posteriors(posteriorsSEXP );
        Rcpp::traits::input_parameter< Rcpp::List >::type models(modelsSEXP );
        Rcpp::traits::input_parameter< Rcpp::List >::type ucs(ucsSEXP );
        Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP );
        Rcpp::List __result = fitModels(counts, posteriors, models, ucs, nthreads);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// fitModelsGapMat
Rcpp::List fitModelsGapMat(SEXP counts, Rcpp::NumericMatrix posteriors, Rcpp::List models, Rcpp::List ucs, int nthreads = 1);
RcppExport SEXP kfoots_fitModelsGapMat(SEXP countsSEXP, SEXP posteriorsSEXP, SEXP modelsSEXP, SEXP ucsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type counts(countsSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type posteriors(posteriorsSEXP );
        Rcpp::traits::input_parameter< Rcpp::List >::type models(modelsSEXP );
        Rcpp::traits::input_parameter< Rcpp::List >::type ucs(ucsSEXP );
        Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP );
        Rcpp::List __result = fitModelsGapMat(counts, posteriors, models, ucs, nthreads);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// getRealSeconds
double getRealSeconds();
RcppExport SEXP kfoots_getRealSeconds() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        double __result = getRealSeconds();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
